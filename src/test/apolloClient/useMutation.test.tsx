import { useMutation, ApolloClient, InMemoryCache } from "@apollo/client"
import { handleResult } from "../../handleResult"
import React, { useState } from "react"
import { gql } from "./gql"
import { render, screen, waitFor } from "@testing-library/react"
import userEvent from "@testing-library/user-event"
import {
  graphql,
  GraphQLContext,
  GraphQLJsonRequestBody,
  GraphQLRequest,
  GraphQLRequestBody,
  GraphQLVariables,
  ResponseResolver,
} from "msw"
import { setupServer } from "msw/node"
import { describe, expect, it } from "vitest"
import path from "path"

const query = gql(`
mutation CreateTask($text: String!) {
  createTask(text: $text) {
    id
    text
  }
}
`)

const executeOperation: ResponseResolver<
  GraphQLRequest<Record<string, unknown>>,
  GraphQLContext<Record<string, unknown>>
> = async (_, res, ctx) => {
  console.log("executing")
  return res(
    ctx.data({
      data: {
        createTask: {
          id: "1",
          text: "whatever",
        },
      },
    })
  )
}

const server = setupServer(graphql.mutation(/./, executeOperation), q)

server.listen()

const APOLLO_CLIENT = new ApolloClient({
  cache: new InMemoryCache(),
})

const Component = () => {
  const [createTask] = useMutation(query, { client: APOLLO_CLIENT })
  const [result, setResult] = useState("")

  const handleClick = async () => {
    console.log("yes did click")
    const result = await handleResult(
      createTask({ variables: { text: "hello" } })
    )
    console.log("doot doot doot!", result)
    const {
      data: { createTask: task },
    } = result
    setResult(task.text)
  }

  return (
    <>
      <div>Result: {result}</div>
      <button onClick={handleClick}>Click me</button>
    </>
  )
}

describe("a mutation with types generated by gql-tag-operations-preset", () => {
  it("should work", async () => {
    render(<Component />)

    const button = await screen.findByRole("button")
    userEvent.click(button)

    await waitFor(() => screen.findByText("Result: whatever"))
  })
})
